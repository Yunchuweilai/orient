ZigZag:
  Graph:
    DRG:
      declare(degree_base, integer)
      drg_e = 0.80
      drg_d = 1/4
    Chung:
      declare(degree_chung, integer)
    declare(block_size, integer)
    declare(size, integer)
    declare(nodes, integer)
    nodes = size / block_size
    degree = degree_base + degree_chung

  Parameters:
    Soundness:
      declare(lambda, integer)
      assume(soundness > 0)
      assume(soundness < 0.5)
      soundness = expt(1/2,-lambda)

    Layers:
      declare(layers, integer)
      assume(layers > 0)
      layers > 2 * log2 (1 / (3 * (epsilon -2 * delta))) + 2 * (0.8 - epsilon + delta)/(0.12 -2 * delta) + 2

    SpaceGap:
      assume(spacegap > 0)
      assume(spacegap < 0.5)
      spacegap = epsilon + 2 * delta
      epsilon + 3 * delta = 0.24

    Challenges:
      OfflineChallenges:
        declare(offline_challenges, integer)
        declare(offline_challenges_all, integer)
        assume(offline_challenges > 0)
        offline_challenges > - lambda / (log2(2 - epsilon - 3  * delta) -1)
        offline_challenges_all > layers * offline_challenges

      OnlineChallenges:
        declare(online_challenges, integer)
        assume(online_challenges > 0)
        online_challenges > log2(1/(3 *(epsilon - 2 * delta)))

  Encoding:
    assume(kdf_content > 0)
    assume(encoding_time > 0)
    assume(polling_time > 0)
    kdf_content = degree + 1
    encoding_time = layers * nodes * (kdf_content * block_size) * kdf_hash_time
    malicious_encoding = encoding_time / encoding_amax
    polling_time = malicious_encoding * drg_d

  Commitment (ZigZagCommitment):
    assume(replica_commit_time > 0)
    replica_commit_time = commit_time * 3

  SNARK (ZigZagCommitment):
    assume(opening_time > 0)
    opening_per_challenge = degree_base + 2 * degree_chung + 1
    openings = offline_challenges_all * opening_per_challenge

    Leaf:
      leaf_elements = layers
      leaf_size = leaf_elements * block_size
      leaf_constraints =  leaf_size * leaf_hash_constraints
      leaf_time = leaf_elements * leaf_hash_circuit_time

    Inclusion:
      inclusion_circuit_time = tree_depth * merkle_hash_time_circuit

    SNARK:
      snark_time_per_tree = (leaf_time + inclusion_circuit_time) * opening
      snark_circuit_per_tree = (leaf_constraints + inclusion_constraints) * openings
      snark_time = snark_circuit_per_tree * 3
      snark_circuit = snark_circuit_per_tree * 3
    

  InclusionProof:
    MerkleInclusionProof:
      declare(tree_depth, integer)
      tree_depth = log2(nodes)
      inclusion_constraints = tree_depth * merkle_hash_constraints
      commit_time = nodes * vc_hash_constraints
    
  Seal:
    seal_time = commit_time + snark_time + encoding_time
    parallel_seal_time = (snark_time + commit_time)/cores + encoding_time

  Cost:
    seal_cost = seal_time * (cpu_cost_per_second + memory_cost_per_second)
