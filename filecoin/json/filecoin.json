{
  "schema": [
    {
      "name": "AWS-GLACIER-PRICE",
      "description": "Cost of one GiB storage from AWS glacier for one month. Unit: dollars"
    },
    {
      "name": "ANNUAL-INCOME",
      "description": "Annual income from selling storage on the storage market. Unit: dollars"
    },
    {
      "name": "MONTHLY-INCOME",
      "description": "Monthly income from selling storage on the storage market. Unit: dollars"
    },
    {
      "name": "COMPARABLE-MONTHLY-COST",
      "description": "Expected cost of purchasing monthly storage from commodity provider. Unit: dollars"
    },
    {
      "name": "GIB-HOUR-SEAL-INVESTMENT",
      "description": "Cost of investment required to seal one GiB in one hour at scale. Unit: dollars"
    },
    {
      "name": "GIB-SEAL-COST",
      "description": "Cost of sealing one GiB. Unit: dollars"
    },
    {
      "name": "COMMODITY-STORAGE-DISCOUNT",
      "description": "Fraction of commodity storage pricing expected as income from storage market. Unit: decimal fraction"
    },
    {
      "name": "MINER-MONTHS-TO-CAPACITY",
      "description": "Months it should take a miner to reach full storage capacity. Unit: months"
    },
    {
      "name": "GIB-CAPACITY",
      "description": "GiB of storage at full capacity. Unit: GiB"
    },
    {
      "name": "TIB-CAPACITY",
      "description": "TiB of storage at full capacity. Unit: TiB"
    },
    {
      "name": "ANNUAL-TIB",
      "description": "TiB of storage which must be brought online per year. Unit: TiB"
    },
    {
      "name": "MONTHLY-TIB",
      "description": "TiB of storage which must be brought online per month. Unit: TiB"
    },
    {
      "name": "DAILY-TIB",
      "description": "TiB of storage which must be brought online per day. Unit: TiB"
    },
    {
      "name": "HOURLY-TIB",
      "description": "TiB of storage which must be brought online per hour. Unit: TiB"
    },
    {
      "name": "HOURLY-GIB",
      "description": "GiB of storage which must be brought online per hour. Unit: GiB"
    },
    {
      "name": "SEAL-CYCLES-PER-HOUR",
      "description": "CPU required to seal at required rate for one hour. Unit: cycles"
    },
    {
      "name": "SEAL-CYCLES-PER-MINUTE",
      "description": "CPU required to seal at required rate for one minute. Unit: cycles"
    },
    {
      "name": "SEAL-CYCLES-PER-SECOND",
      "description": "CPU required to seal at required rate for one second. Unit: cycles"
    },
    {
      "name": "GIB-SEAL-CYCLES",
      "description": "Total CPU cycles required to seal 1 GiB. Unit: cycles"
    },
    {
      "name": "NEEDED-GHZ",
      "description": "Total GHz capacity needed to seal at the required rate."
    },
    {
      "name": "UP-FRONT-DRIVE-COST",
      "description": "Up-front investment in hard drives required to store sufficient sealed data. Unit: dollars."
    },
    {
      "name": "UP-FRONT-MEMORY-COST",
      "description": "Up-front investment in memory (RAM) required to seal at necessary rate. Unit: dollars"
    },
    {
      "name": "UP-FRONT-COMPUTE-COST",
      "description": "Up-front investement in compute hardware required to seal at necessary rate. Unit: dollars"
    },
    {
      "name": "UP-FRONT-SEALING-COST",
      "description": "Up-front investment in total hardware require to seal at necessary rate. Unit: dollars"
    },
    {
      "name": "TOTAL-UP-FRONT-COST",
      "description": "Total up-front investment required to generate MONTHLY-INCOME. Unit: dollars"
    },
    {
      "name": "AVERAGE-MONTHLY-INCOME-DURING-RAMP-UP",
      "description": "Average monthly income before miner reaches capacity (assuming linear growth). Unit: dollars"
    },
    {
      "name": "INCOME-DURING-RAMP-UP",
      "description": "Total income during ramp-up period (before reaching capacity). Unit: dollars"
    },
    {
      "name": "INCOME-TO-FGR-AT-CAPACITY",
      "description": "Income still required to reach filecoin growth rate equilibrium after reaching capacity. Unit: dollars"
    },
    {
      "name": "FGR-MONTHS-AT-CAPACITY",
      "description": "Months needed after reaching capacity before filecoin growth rate equilibrium."
    },
    {
      "name": "FGR-MONTHS",
      "description": "Months after which a miner should reach filecoin growth rate equilibrium."
    },
    {
      "name": "ONE-YEAR-PROFIT-MONTHS",
      "description": "Months from FGR to one year of profit. Unit: months"
    },
    {
      "name": "ONE-YEAR-PROFIT",
      "description": "Profit after one year of operation: Unit: dollars"
    },
    {
      "name": "ONE-YEAR-FGR",
      "description": "FGR after one year of operation: Unit: fraction"
    },
    {
      "name": "TWO-YEAR-PROFIT-MONTHS",
      "description": "Months from FGR to two years of profit. Unit: months"
    },
    {
      "name": "TWO-YEAR-PROFIT",
      "description": "Profit after two years of operation: Unit: dollars"
    },
    {
      "name": "TWO-YEAR-FGR",
      "description": "FGR after two years of operation: Unit: fraction"
    },
    {
      "name": "THREE-YEAR-PROFIT-MONTHS",
      "description": "Months from FGR to three years of profit. Unit: months"
    },
    {
      "name": "THREE-YEAR-PROFIT",
      "description": "Profit after three years of operation: Unit: dollars"
    },
    {
      "name": "THREE-YEAR-FGR",
      "description": "FGR after three years of operation: Unit: fraction"
    },
    {
      "name": "SEAL-HZ",
      "description": "Cycles per second at which the sealing machine operates. Unit: Hz"
    },
    {
      "name": "SEAL-GHZ",
      "description": "Cycles per second at which the sealing machine operates. Unit: GHz"
    },
    {
      "name": "NODE-BYTES",
      "description": "The number of bytes in a node -- must also be the hash digest size."
    },
    {
      "name": "SECTOR-GIB",
      "description": "Size of one sector. Unit: GiB"
    },
    {
      "name": "SECTOR-SIZE",
      "description": "Size of one sector. Unit: bytes"
    },
    {
      "name": "COMM-D-SIZE",
      "description": "Size of the data commitment (CommD). Unit: bytes"
    },
    {
      "name": "COMM-R-SIZE",
      "description": "Size of the replica commitment (CommR). Unit: bytes"
    },
    {
      "name": "COMM-R-STAR-SIZE",
      "description": "Size of the aggregated commitment to each layer's replica (CommR*). Unit: bytes"
    },
    {
      "name": "COMM-RS-SIZE",
      "description": "Size of all replica commitments. Unit: bytes"
    },
    {
      "name": "COMMITMENTS-SIZE",
      "description": "Size of all commitments returned by Seal. Unit: bytes"
    },
    {
      "name": "ON-CHAIN-POREP-SIZE",
      "description": "On-chain size of one Seal proof plus commitments. Unit: bytes"
    },
    {
      "name": "DEGREE",
      "description": "Total in-degree of the ZigZag graph."
    },
    {
      "name": "BASE-DEGREE",
      "description": "In-degree of the base depth-robust graph (DRG)."
    },
    {
      "name": "EXPANSION-DEGREE",
      "description": "Maximum in-degree of the bipartite expander graph component of a ZigZag graph."
    },
    {
      "name": "SLOTH-ITER",
      "description": "Number of iterations of sloth verifiable delay encoding (VDE) to perform."
    },
    {
      "name": "PARTITIONS",
      "description": "Number of circuit partitions into which a proof is divided."
    },
    {
      "name": "REPLICATION-TIME",
      "description": "Time to replicate one sector. Unit: seconds"
    },
    {
      "name": "REPLICATION-TIME-PER-BYTE",
      "description": "Time to replicate one byte. Unit: seconds / byte"
    },
    {
      "name": "REPLICATION-TIME-PER-GIB",
      "description": "Time to replicate one GiB. Unit: seconds / GiB"
    },
    {
      "name": "SEALING-TIME",
      "description": "Total CPU time to seal (replicate + generate proof of replication) one sector. Unit: seconds"
    },
    {
      "name": "NON-CIRCUIT-PROVING-TIME",
      "description": "Time (including replication) to generate a non-circuit proof of replication. Unit: seconds"
    },
    {
      "name": "VECTOR-COMMITMENT-TIME",
      "description": "Time to generate the vector commitments used in a non-circuit proof of replication. Unit: seconds"
    },
    {
      "name": "CIRCUIT-PROVING-TIME-PER-CONSTRAINT",
      "description": "Groth16 circuit proving time (from benchmarks) per constraint. Unit: seconds"
    },
    {
      "name": "ZIGZAG-TOTAL-PROVING-TIME",
      "description": "Total time to generate a proof of replication (circuit and non-circuit). Unit: seconds"
    },
    {
      "name": "SEAL-TIME",
      "description": "Total time to seal (replication + proving) one sector. Unit: seconds"
    },
    {
      "name": "WALL-CLOCK-SEAL-TIME",
      "description": "Wall clock time sealing time using SEAL-PARALLELISM cores. Unit: seconds"
    },
    {
      "name": "SEAL-PARALLELISM",
      "description": "Number of cores utilized when computing wall-clock-seal-time."
    },
    {
      "name": "SECTOR-GIB",
      "description": "Number of GiB in one sector. Unit: GiB"
    },
    {
      "name": "GIB-SEAL-TIME",
      "description": "Total time to seal (replication + proving) one GiB. Unit: seconds"
    },
    {
      "name": "TOTAL-PARENTS",
      "description": "Number of parents (or padding) each node uses when performing key derivation."
    },
    {
      "name": "HASH-FUNCTIONS",
      "description": "Alternate hash functions for use in merkle-tree generation, KDF, or other commitments. All values here assume 64 bytes of raw input, but benchmarks include any extra, 'personalization', bits/bytes included as input during merkle-tree construction."
    },
    {
      "name": "SINGLE-KDF-HASHES",
      "description": "Number of hashes performed as part of a single application of the key-derivation function (KDF). This is equal to the number of parents and includes the replica ID. Since we use Merkle-Damgard construction, the number of compression hashes is the number of elements - 1."
    },
    {
      "name": "KDF-HASHES",
      "description": "Number of hashes performed as part of the key-derivation function (KDF)."
    },
    {
      "name": "SINGLE-KDF-TIME",
      "description": "Hashing time to perform a single KDF. Unit: seconds"
    },
    {
      "name": "SINGLE-LAYER-MERKLE-HASHING-TIME",
      "description": "Merkle hashing time for a single layer. Unit: seconds"
    },
    {
      "name": "TOTAL-MERKLE-TREES",
      "description": "Total merkle trees which must be generated."
    },
    {
      "name": "TOTAL-MERKLE-HASHING-TIME",
      "description": "Total time to generate all merkle trees. Unit: seconds"
    },
    {
      "name": "TOTAL-NODES-TO-ENCODE",
      "description": "Total nodes to encode across all layers."
    },
    {
      "name": "SINGLE-NODE-SLOTH-TIME",
      "description": "Time to perform sloth (VDE) for a single node. Unit: seconds"
    },
    {
      "name": "SINGLE-NODE-ENCODING-TIME",
      "description": "Time to encode a single node. Unit: seconds"
    },
    {
      "name": "SINGLE-CHALLENGE-INCLUSION-PROOFS",
      "description": "Number of inclusion proofs which must be verified for a single challenge."
    },
    {
      "name": "SINGLE-CHALLENGE-MERKLE-HASES",
      "description": "Number of merkle hashes which must be verified for a single challenge."
    },
    {
      "name": "SINGLE-CHALLENGE-KDF-HASHES",
      "description": "Number of KDF hashes which must be verified for a single challenge."
    },
    {
      "name": "SINGLE-CHALLENGE-SLOTH-VERIFICATIONS",
      "description": "Number of sloth iterations which must be verified for a single challenge."
    },
    {
      "name": "TOTAL-KDF-HASHES",
      "description": "Total number of KDF (key-derivation function) required during replication."
    },
    {
      "name": "TOTAL-ZIGZAG-KDF-HASHING-CONSTRAINTS",
      "description": "Total number of kdf hashing constraints in a ZigZag circuit."
    },
    {
      "name": "TOTAL-ZIGZAG-NON-HASHING-CONSTRAINTS",
      "description": "Total number of hashes which must be verified in a ZigZag circuit."
    },
    {
      "name": "TOTAL-ZIGZAG-CIRCUIT-KDF-HASHES",
      "description": "Total number of KDF hashes which must be verified in a ZigZag circuit."
    },
    {
      "name": "TOTAL-ZIGZAG-SLOTH-CONSTRAINTS",
      "description": "Total number of constraints due to sloth verification."
    },
    {
      "name": "TOTAL-ZIGZAG-CONSTRAINTS",
      "description": "Total number of constraints which must be verified in a ZigZag circuit."
    },
    {
      "name": "LAYER-INDEX",
      "description": "Index of layer. Unit: integer"
    },
    {
      "name": "LAYER-REPLICATION-TIME",
      "description": "Time to replicate one layer. Unit: seconds"
    },
    {
      "name": "STORAGE-TO-PROOF-SIZE-RATIO",
      "description": "Ratio of sealed sector size to on-chain PoRep size."
    },
    {
      "name": "STORAGE-TO-PROOF-SIZE-FLOAT",
      "description": "Ratio of sealed sector size to on-chain PoRep size -- expressed as a float."
    },
    {
      "name": "SINGLE-CIRCUIT-PROOF-SIZE",
      "description": "Size of a single Groth16 Proof. Unit: bytes"
    },
    {
      "name": "TOTAL-CIRCUIT-PROOF-SIZE",
      "description": "Total size of a single circuit proof. Unit: bytes"
    },
    {
      "name": "TOTAL-CHALLENGES",
      "description": ""
    },
    {
      "name": "PARTITION-CHALLENGES",
      "description": ""
    },
    {
      "name": "KDF-HASH-FUNCTION.SIZE",
      "description": "Size of digest (output) generated by *.HASH-FUNCTION."
    },
    {
      "name": "KDF-HASH-FUNCTION.CIRCUIT-TIME",
      "description": "Time for one *.HASH-FUNCTION in circuit."
    },
    {
      "name": "KDF-HASH-FUNCTION.CONSTRAINTS",
      "description": "Number of constraints required to prove *.HASH-FUNCTION in circuit."
    },
    {
      "name": "KDF-HASH-FUNCTION.HASH-FUNCTION%",
      "description": "Tuple containing the selected hash function's characteristics."
    },
    {
      "name": "MERKLE-HASH-FUNCTION.SIZE",
      "description": "Size of digest (output) generated by *.HASH-FUNCTION."
    },
    {
      "name": "MERKLE-HASH-FUNCTION.CIRCUIT-TIME",
      "description": "Time for one *.HASH-FUNCTION in circuit."
    },
    {
      "name": "MERKLE-HASH-FUNCTION.CONSTRAINTS",
      "description": "Number of constraints required to prove *.HASH-FUNCTION in circuit."
    },
    {
      "name": "MERKLE-HASH-FUNCTION.HASH-FUNCTION%",
      "description": "Tuple containing the selected hash function's characteristics."
    },
    {
      "name": "ALPHA-HASH-FUNCTION.SIZE",
      "description": "Size of digest (output) generated by *.HASH-FUNCTION."
    },
    {
      "name": "ALPHA-HASH-FUNCTION.CIRCUIT-TIME",
      "description": "Time for one *.HASH-FUNCTION in circuit."
    },
    {
      "name": "ALPHA-HASH-FUNCTION.CONSTRAINTS",
      "description": "Number of constraints required to prove *.HASH-FUNCTION in circuit."
    },
    {
      "name": "ALPHA-HASH-FUNCTION.HASH-FUNCTION%",
      "description": "Tuple containing the selected hash function's characteristics."
    },
    {
      "name": "BETA-HASH-FUNCTION.SIZE",
      "description": "Size of digest (output) generated by *.HASH-FUNCTION."
    },
    {
      "name": "BETA-HASH-FUNCTION.CIRCUIT-TIME",
      "description": "Time for one *.HASH-FUNCTION in circuit."
    },
    {
      "name": "BETA-HASH-FUNCTION.CONSTRAINTS",
      "description": "Number of constraints required to prove *.HASH-FUNCTION in circuit."
    },
    {
      "name": "BETA-HASH-FUNCTION.HASH-FUNCTION%",
      "description": "Tuple containing the selected hash function's characteristics."
    },
    {
      "name": "ZIGZAG-SOUNDNESS",
      "description": "ZigZag soundness: Unit fraction"
    },
    {
      "name": "ZIGZAG-LAMBDA",
      "description": "ZigZag soundness: Unit bits"
    },
    {
      "name": "ZIGZAG-EPSILON",
      "description": "Maximum allowable deletion (space tightness): Unit: fraction"
    },
    {
      "name": "ZIGZAG-DELTA",
      "description": "Maximum allowable cheating on labels (block corruption)"
    },
    {
      "name": "ZIGZAG-BASIC-LAYER-CHALLENGES",
      "description": "Multiple of lambda challenges per layer, without tapering optimization."
    },
    {
      "name": "ZIGZAG-BASIC-LAYER-CHALLENGE-FACTOR",
      "description": "Number of challenges which, when multiplied by lambda, yields the number of challenges per layer without tapering optimization."
    },
    {
      "name": "ZIGZAG-SPACE-GAP",
      "description": "Maximum allowable gap between actual and claimed storage. Unit: fraction"
    },
    {
      "name": "ZIGZAG-LAYER-CHALLENGES",
      "description": "Number of challenges in this (indexed) layer of ZigZag PoRep. Unit: integer"
    },
    {
      "name": "LAYERS",
      "description": "Number of layers specified for this construction (not necessarily same as calculated from security parameters)."
    },
    {
      "name": "MUST-HAVE-FILECOIN",
      "description": "WE MUST HAVE FILECOIN -- SWEET, SWEET FILECOIN."
    },
    {
      "name": "SPACE-GAP-SATISFIED",
      "description": "Is the actual space gap less than or equal to the maximum allowable space gap?"
    },
    {
      "name": "FILECOIN-REQUIREMENTS-SATISFIED",
      "description": "Are the Filecoin requirements all satisfied?"
    },
    {
      "name": "MINIMUM-ONE-YEAR-FGR",
      "description": "Minimum allowable FGR after one year."
    },
    {
      "name": "MINIMUM-TWO-YEAR-FGR",
      "description": "Minimum allowable FGR after two years."
    },
    {
      "name": "MINIMUM-THREE-YEAR-FGR",
      "description": "Minimum allowable FGR after three years."
    },
    {
      "name": "MINIMUM-STORAGE-TO-PROOF-SIZE-RATIO",
      "description": "Minimum necessary storage to on-chain proof ratio."
    },
    {
      "name": "PROFIT",
      "description": "… Profit."
    }
  ],
  "assignments": {
    "optimalHeights": {
      "tuples": [
        {
          "constraints": 0,
          "layerIndex": 0,
          "lowestTime": 97.94244,
          "circuitTime": 0,
          "hashingTime": 97.94244,
          "optimalBetaMerkleHeight": 30
        },
        {
          "constraints": 171690880,
          "layerIndex": 1,
          "lowestTime": 24432.822,
          "circuitTime": 20836.523,
          "hashingTime": 3596.2986,
          "optimalBetaMerkleHeight": 3
        },
        {
          "constraints": 171690880,
          "layerIndex": 2,
          "lowestTime": 24432.822,
          "circuitTime": 20836.523,
          "hashingTime": 3596.2986,
          "optimalBetaMerkleHeight": 3
        },
        {
          "constraints": 171690880,
          "layerIndex": 3,
          "lowestTime": 24432.822,
          "circuitTime": 20836.523,
          "hashingTime": 3596.2986,
          "optimalBetaMerkleHeight": 3
        },
        {
          "constraints": 225136320,
          "layerIndex": 4,
          "lowestTime": 34205.582,
          "circuitTime": 27110.928,
          "hashingTime": 7094.655,
          "optimalBetaMerkleHeight": 2
        },
        {
          "constraints": 330199936,
          "layerIndex": 5,
          "lowestTime": 46857.348,
          "circuitTime": 39762.69,
          "hashingTime": 7094.655,
          "optimalBetaMerkleHeight": 2
        },
        {
          "constraints": 424019904,
          "layerIndex": 6,
          "lowestTime": 64618.906,
          "circuitTime": 50527.54,
          "hashingTime": 14091.367,
          "optimalBetaMerkleHeight": 1
        },
        {
          "constraints": 636029856,
          "layerIndex": 7,
          "lowestTime": 89882.68,
          "circuitTime": 75791.31,
          "hashingTime": 14091.367,
          "optimalBetaMerkleHeight": 1
        },
        {
          "constraints": 796337056,
          "layerIndex": 8,
          "lowestTime": 121573.375,
          "circuitTime": 93488.586,
          "hashingTime": 28084.791,
          "optimalBetaMerkleHeight": 0
        },
        {
          "constraints": 1191833312,
          "layerIndex": 9,
          "lowestTime": 168003.95,
          "circuitTime": 139919.16,
          "hashingTime": 28084.791,
          "optimalBetaMerkleHeight": 0
        },
        {
          "constraints": 1785077696,
          "layerIndex": 10,
          "lowestTime": 237649.81,
          "circuitTime": 209565.02,
          "hashingTime": 28084.791,
          "optimalBetaMerkleHeight": 0
        }
      ]
    },
    "nodes": 1073741824,
    "degree": 13,
    "layers": 10,
    "profit": true,
    "sealHz": 5000000000,
    "sealGhz": 5,
    "dailyTib": 1.1147972,
    "sealTime": 843044.06,
    "fgrMonths": 6.409414,
    "hourlyGib": 47.564682,
    "hourlyTib": 0.046449885,
    "neededGhz": 1740.4132,
    "nodeBytes": 32,
    "partitions": 1,
    "sectorGib": 32,
    "slothIter": 0,
    "baseDegree": 5,
    "commDSize": 32,
    "commRSize": 32,
    "monthlyTib": 33.908417,
    "sectorSize": 34359738368,
    "commRsSize": 64,
    "cpuGhzCost": 10,
    "gibCapacity": 104166.66,
    "oneYearFgr": 1.1387482,
    "tibCapacity": 101.72525,
    "twoYearFgr": 3.5830317,
    "zigzagDelta": 0.003,
    "zigzagTaper": 0.33333334,
    "annualIncome": 50000,
    "gibSealCost": 0.16707969,
    "gibSealTime": 26345.127,
    "totalParents": 13,
    "zigzagLambda": 8,
    "zigzagLayers": 12,
    "hashFunctions": {
      "tuples": [
        {
          "circuitTime": 0.153988,
          "hashFunctionName": "pedersen",
          "hashFunctionSize": 32,
          "hashFunctionTime": 2.6156e-05,
          "hashFunctionConstraints": 1324
        },
        {
          "circuitTime": 0.65253,
          "hashFunctionName": "blake2sKdf",
          "hashFunctionSize": 32,
          "hashFunctionTime": 4.5608e-08,
          "hashFunctionConstraints": 5162
        },
        {
          "circuitTime": 1.30506,
          "hashFunctionName": "blake2s",
          "hashFunctionSize": 32,
          "hashFunctionTime": 9.1216e-08,
          "hashFunctionConstraints": 10324
        }
      ]
    },
    "monthlyIncome": 4166.6665,
    "threeYearFgr": 6.027315,
    "tibDriveCost": 30,
    "zigzagEpsilon": 0.007,
    "gibSealCycles": 131725630000000,
    "oneYearProfit": 23294.107,
    "singleKdfTime": 6.38512e-07,
    "twoYearProfit": 73294.1,
    "alternateLayers": {
      "tuples": [
        {
          "provingTime": 237649.81,
          "betaMerkleHeight": 0
        },
        {
          "provingTime": 269791.34,
          "betaMerkleHeight": 1
        },
        {
          "provingTime": 308929.63,
          "betaMerkleHeight": 2
        },
        {
          "provingTime": 351566.25,
          "betaMerkleHeight": 3
        },
        {
          "provingTime": 395952.03,
          "betaMerkleHeight": 4
        },
        {
          "provingTime": 441212.38,
          "betaMerkleHeight": 5
        },
        {
          "provingTime": 486910.06,
          "betaMerkleHeight": 6
        },
        {
          "provingTime": 532826.4,
          "betaMerkleHeight": 7
        },
        {
          "provingTime": 578852,
          "betaMerkleHeight": 8
        },
        {
          "provingTime": 624932.3,
          "betaMerkleHeight": 9
        },
        {
          "provingTime": 671039.94,
          "betaMerkleHeight": 10
        },
        {
          "provingTime": 717161.25,
          "betaMerkleHeight": 11
        },
        {
          "provingTime": 763289.4,
          "betaMerkleHeight": 12
        },
        {
          "provingTime": 809420.9,
          "betaMerkleHeight": 13
        },
        {
          "provingTime": 855554.1,
          "betaMerkleHeight": 14
        },
        {
          "provingTime": 901688.4,
          "betaMerkleHeight": 15
        },
        {
          "provingTime": 947822.8,
          "betaMerkleHeight": 16
        },
        {
          "provingTime": 993957.5,
          "betaMerkleHeight": 17
        },
        {
          "provingTime": 1040092.5,
          "betaMerkleHeight": 18
        },
        {
          "provingTime": 1086227.4,
          "betaMerkleHeight": 19
        },
        {
          "provingTime": 1132362.4,
          "betaMerkleHeight": 20
        },
        {
          "provingTime": 1178497.4,
          "betaMerkleHeight": 21
        },
        {
          "provingTime": 1224632.3,
          "betaMerkleHeight": 22
        },
        {
          "provingTime": 1270767.1,
          "betaMerkleHeight": 23
        },
        {
          "provingTime": 1316902.3,
          "betaMerkleHeight": 24
        },
        {
          "provingTime": 1363037.1,
          "betaMerkleHeight": 25
        },
        {
          "provingTime": 1409172.3,
          "betaMerkleHeight": 26
        },
        {
          "provingTime": 1455307.1,
          "betaMerkleHeight": 27
        },
        {
          "provingTime": 1501442,
          "betaMerkleHeight": 28
        },
        {
          "provingTime": 1547577.1,
          "betaMerkleHeight": 29
        },
        {
          "provingTime": 1593712.1,
          "betaMerkleHeight": 30
        }
      ]
    },
    "commRStarSize": 32,
    "commitmentsSize": 96,
    "expansionDegree": 8,
    "replicationTime": 6855.9707,
    "sealParallelism": 14,
    "totalChallenges": 2672,
    "zigzagSoundness": 0.00390625,
    "zigzagSpaceGap": 0.01,
    "awsGlacierPrice": 0.004,
    "singleKdfHashes": 14,
    "threeYearProfit": 123294.1,
    "mustHaveFilecoin": true,
    "totalCircuitTime": 698674.8,
    "totalHashingTime": 137513.25,
    "totalProvingTime": 836188.06,
    "onChainPorepSize": 288,
    "spaceGapSatisfied": true,
    "totalUpFrontCost": 20455.89,
    "upFrontDriveCost": 3051.7576,
    "minimumOneYearFgr": -2,
    "minimumTwoYearFgr": 0.25,
    "partitionChallenges": 2672,
    "sealCyclesPerHour": 6265487600000000,
    "upFrontMemoryCost": 0,
    "wallClockSealTime": 59727.72,
    "incomeDuringRampUp": 6250,
    "totalNodesToEncode": 10737418240,
    "upFrontComputeCost": 17404.133,
    "upFrontSealingCost": 17404.133,
    "fgrMonthsAtCapacity": 3.4094138,
    "kdfHashFunctionName": "blake2sKdf",
    "kdfHashFunction.size": 32,
    "kdfHashFunction.time": 4.5608e-08,
    "layerReplicationTime": 685.59705,
    "maxBetaMerkleHeight": 30,
    "minimumThreeYearFgr": 1,
    "oneYearFgrSatisfied": true,
    "oneYearProfitMonths": 5.590586,
    "sealCyclesPerMinute": 104424790000000,
    "sealCyclesPerSecond": 1740413200000,
    "singleNodeSlothTime": 0,
    "twoYearFgrSatisfied": true,
    "twoYearProfitMonths": 17.590586,
    "betaHashFunctionName": "blake2s",
    "betaHashFunction.size": 32,
    "betaHashFunction.time": 9.1216e-08,
    "comparableMonthlyCost": 416.66666,
    "kdfHashFunction.name%": "blake2sKdf",
    "totalZigzagChallenges": 2672,
    "alphaHashFunctionName": "pedersen",
    "alphaHashFunction.size": 32,
    "alphaHashFunction.time": 2.6156e-05,
    "betaHashFunction.name%": "blake2s",
    "filecoinFgrRequirement": true,
    "gibHourSealInvestment": 365.90454,
    "layerPerformance.layers": 10,
    "minerMonthsToCapacity": 3,
    "replicationTimePerGib": 214.24908,
    "threeYearFgrSatisfied": true,
    "threeYearProfitMonths": 29.590586,
    "totalCircuitProofSize": 192,
    "totalZigzagConstraints": 5903706720,
    "alphaHashFunction.name%": "pedersen",
    "benchCircuitConstraints": 10324,
    "incomeToFgrAtCapacity": 14205.891,
    "merkleHashFunctionName": "pedersen",
    "merkleHashFunction.size": 32,
    "merkleHashFunction.time": 2.6156e-05,
    "replicationTimePerByte": 1.9953501e-07,
    "singleCircuitProofSize": 192,
    "singleNodeEncodingTime": 6.38512e-07,
    "benchCircuitProvingTime": 0.14464,
    "commodityStorageDiscount": 10,
    "filecoinFgrRequirement1": true,
    "merkleHashFunction.name%": "pedersen",
    "totalUntaperedChallenges": 32000,
    "maximumAllowableSpaceGap": 0.02,
    "singleChallengeKdfHashes": 14,
    "singleSlothIterationTime": 123,
    "storageToProofSizeFloat": 119304650,
    "storageToProofSizeRatio": 119304650,
    "layerPerformance.nodeBytes": 32,
    "wallClockSealTimePerGib": 1866.4912,
    "kdfHashFunction.constraints": 5162,
    "layerPerformance.layerIndex": 10,
    "layerPerformance.sectorSize": 34359738368,
    "wallClockSealTimePerByte": 1.7383054e-06,
    "zigzagBasicLayerChallenges": 2666.6667,
    "betaHashFunction.constraints": 10324,
    "kdfHashFunction.circuitTime": 0.65253,
    "layerPerformance.circuitTime": 1593614.1,
    "totalZigzagOtherConstraints": 0,
    "totalZigzagSlothConstraints": 857712,
    "alphaHashFunction.constraints": 1324,
    "alphaMerkleHashFunctionName": "pedersen",
    "betaHashFunction.circuitTime": 1.30506,
    "filecoinRequirementsSatisfied": true,
    "totalZigzagCircuitKdfHashes": 37408,
    "alphaHashFunction.circuitTime": 0.153988,
    "filecoinStorageRatioSatisfied": true,
    "kdfHashFunction.hashFunction%": {
      "circuitTime": 0.65253,
      "hashFunctionName": "blake2sKdf",
      "hashFunctionSize": 32,
      "hashFunctionTime": 4.5608e-08,
      "hashFunctionConstraints": 5162
    },
    "merkleHashFunction.constraints": 1324,
    "betaHashFunction.hashFunction%": {
      "circuitTime": 1.30506,
      "hashFunctionName": "blake2s",
      "hashFunctionSize": 32,
      "hashFunctionTime": 9.1216e-08,
      "hashFunctionConstraints": 10324
    },
    "kdfHashFunction.hashFunctions%": {
      "tuples": [
        {
          "circuitTime": 0.153988,
          "hashFunctionName": "pedersen",
          "hashFunctionSize": 32,
          "hashFunctionTime": 2.6156e-05,
          "hashFunctionConstraints": 1324
        },
        {
          "circuitTime": 0.65253,
          "hashFunctionName": "blake2sKdf",
          "hashFunctionSize": 32,
          "hashFunctionTime": 4.5608e-08,
          "hashFunctionConstraints": 5162
        },
        {
          "circuitTime": 1.30506,
          "hashFunctionName": "blake2s",
          "hashFunctionSize": 32,
          "hashFunctionTime": 9.1216e-08,
          "hashFunctionConstraints": 10324
        }
      ]
    },
    "merkleHashFunction.circuitTime": 0.153988,
    "singleChallengeInclusionProofs": 15,
    "alphaHashFunction.hashFunction%": {
      "circuitTime": 0.153988,
      "hashFunctionName": "pedersen",
      "hashFunctionSize": 32,
      "hashFunctionTime": 2.6156e-05,
      "hashFunctionConstraints": 1324
    },
    "betaHashFunction.hashFunctions%": {
      "tuples": [
        {
          "circuitTime": 0.153988,
          "hashFunctionName": "pedersen",
          "hashFunctionSize": 32,
          "hashFunctionTime": 2.6156e-05,
          "hashFunctionConstraints": 1324
        },
        {
          "circuitTime": 0.65253,
          "hashFunctionName": "blake2sKdf",
          "hashFunctionSize": 32,
          "hashFunctionTime": 4.5608e-08,
          "hashFunctionConstraints": 5162
        },
        {
          "circuitTime": 1.30506,
          "hashFunctionName": "blake2s",
          "hashFunctionSize": 32,
          "hashFunctionTime": 9.1216e-08,
          "hashFunctionConstraints": 10324
        }
      ]
    },
    "layerPerformance.layerChallenges": 2672,
    "singleSlothIterationConstraints": 321,
    "alphaHashFunction.hashFunctions%": {
      "tuples": [
        {
          "circuitTime": 0.153988,
          "hashFunctionName": "pedersen",
          "hashFunctionSize": 32,
          "hashFunctionTime": 2.6156e-05,
          "hashFunctionConstraints": 1324
        },
        {
          "circuitTime": 0.65253,
          "hashFunctionName": "blake2sKdf",
          "hashFunctionSize": 32,
          "hashFunctionTime": 4.5608e-08,
          "hashFunctionConstraints": 5162
        },
        {
          "circuitTime": 1.30506,
          "hashFunctionName": "blake2s",
          "hashFunctionSize": 32,
          "hashFunctionTime": 9.1216e-08,
          "hashFunctionConstraints": 10324
        }
      ]
    },
    "circuitProvingTimePerConstraint": 1.4010074e-05,
    "layerPerformance.betaHashingTime": 97.94244,
    "merkleHashFunction.hashFunction%": {
      "circuitTime": 0.153988,
      "hashFunctionName": "pedersen",
      "hashFunctionSize": 32,
      "hashFunctionTime": 2.6156e-05,
      "hashFunctionConstraints": 1324
    },
    "minimumStorageToProofSizeRatio": 42949670,
    "zigzagBasicLayerChallengeFactor": 333.33334,
    "layerPerformance.alphaHashingTime": 0,
    "layerPerformance.merkleTree.height": 30,
    "layerPerformance.merkleTree.leaves": 1073741824,
    "merkleHashFunction.hashFunctions%": {
      "tuples": [
        {
          "circuitTime": 0.153988,
          "hashFunctionName": "pedersen",
          "hashFunctionSize": 32,
          "hashFunctionTime": 2.6156e-05,
          "hashFunctionConstraints": 1324
        },
        {
          "circuitTime": 0.65253,
          "hashFunctionName": "blake2sKdf",
          "hashFunctionSize": 32,
          "hashFunctionTime": 4.5608e-08,
          "hashFunctionConstraints": 5162
        },
        {
          "circuitTime": 1.30506,
          "hashFunctionName": "blake2s",
          "hashFunctionSize": 32,
          "hashFunctionTime": 9.1216e-08,
          "hashFunctionConstraints": 10324
        }
      ]
    },
    "singleChallengeSlothVerifications": 0,
    "totalZigzagKdfHashingConstraints": 193100096,
    "totalZigzagNonHashingConstraints": 857712,
    "averageMonthlyIncomeDuringRampUp": 2083.3333,
    "filecoinPorepRequirementsSatisfied": true,
    "layerPerformance.challengeConstraints": 4718068,
    "layerPerformance.challengeCircuitTime": 596.4125,
    "layerPerformance.layerChallengeProofs": 15,
    "layerPerformance.maxBetaMerkleHeight": 30,
    "layerPerformance.merkleTree.heightRaw": 30,
    "layerPerformance.merkleTree.nodeBytes": 32,
    "layerPerformance.betaHashFunction.time": 9.1216e-08,
    "layerPerformance.merkleTree.betaHeight": 30,
    "layerPerformance.merkleTree.sectorSize": 34359738368,
    "layerPerformance.alphaHashFunction.time": 2.6156e-05,
    "layerPerformance.merkleTree.alphaHeight": 0,
    "layerPerformance.merkleTree.alphaLeaves": 1,
    "layerPerformance.challengeKdfConstraints": 72268,
    "layerPerformance.challengeKdfCircuitTime": 9.13542,
    "layerPerformance.inclusionProofConstraints": 309720,
    "layerPerformance.merkleTree.betaHashCount": 1073741823,
    "layerPerformance.singleChallengeKdfHashes": 14,
    "filecoinPorepSecurityRequirementsSatisfied": true,
    "layerPerformance.inclusionProofCircuitTime": 39.151802,
    "layerPerformance.merkleTree.alphaHashCount": 0,
    "layerPerformance.merkleTree.totalHashCount": 1073741823,
    "layerPerformance.kdfHashFunction.constraints": 5162,
    "layerPerformance.betaHashFunction.constraints": 10324,
    "layerPerformance.kdfHashFunction.circuitTime": 0.65253,
    "layerPerformance.alphaHashFunction.constraints": 1324,
    "layerPerformance.betaHashFunction.circuitTime": 1.30506,
    "layerPerformance.challengeInclusionConstraints": 4645800,
    "layerPerformance.alphaHashFunction.circuitTime": 0.153988,
    "layerPerformance.betaInclusionProofConstraints": 309720,
    "layerPerformance.challengeInclusionCircuitTime": 587.27704,
    "layerPerformance.alphaInclusionProofConstraints": 0,
    "layerPerformance.betaInclusionProofCircuitTime": 39.151802,
    "layerPerformance.singleChallengeInclusionProofs": 15,
    "layerPerformance.alphaInclusionProofCircuitTime": 0,
    "layerPerformance.circuitProvingTimePerConstraint": 1.4010074e-05,
    "layerPerformance.merkleTree.betaInclusionProofHashLength": 30,
    "layerPerformance.merkleTree.alphaInclusionProofHashLength": 0,
    "layerPerformance.merkleTree.totalInclusionProofHashLength": 30
  }
}
